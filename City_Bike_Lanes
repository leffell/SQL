-- Adding a new table to an existing database, 
-- Using CTE's and Windows functions to anyalyze the data. 

-- Create a new table called city bike lanes in the Get_Data database. 
CREATE TABLE Get_Data.CityBikeLanes (
id integer primary key,
year_installed year not null,
year_updated year not null,
street varchar not null,
width_feet integer not null,
safetyrating integer not null,
protected varchar not null);

-- Insert some data into the new CityBikeLanes table.
INSERT INTO Get_Data.CityBikeLanes values(1,2012, 2020, "Chestnut",4,4,"yes");
INSERT INTO Get_Data.CityBikeLanes values(2,2016, 2020,"Walnut",4,3.8,"yes");
INSERT INTO Get_Data.CityBikeLanes values(3,2011, 2020, "Market", 3.5, 2, "no");
INSERT INTO Get_Data.CityBikeLanes values(4,2008, 2020,"Locust",4,5,"yes");
INSERT INTO Get_Data.CityBikeLanes values(5,2002, 2020,"South",4.5,4.3,"no");
INSERT INTO Get_Data.CityBikeLanes values(6,2012, 2021, "18th",4,4.7,"yes");
INSERT INTO Get_Data.CityBikeLanes values(7,2016, 2021,"2nd",4,3.7,"yes");
INSERT INTO Get_Data.CityBikeLanes values(8,2011, 2021, "Lombard", 3.5, 2.2, "no");
INSERT INTO Get_Data.CityBikeLanes values(9,2008, 2021,"Pine",4,4.9,"yes");
INSERT INTO Get_Data.CityBikeLanes values(10,2002, 2021,"Tasker",4.5,4.8,"no");
INSERT INTO Get_Data.CityBikeLanes values(11,2012, 2020, "Earp",4,4.1,"yes");
INSERT INTO Get_Data.CityBikeLanes values(12,2016, 2020,"Titan",4,3.8,"yes");
INSERT INTO Get_Data.CityBikeLanes values(13,2011, 2020, "Manning", 3.4, 2, "no");
INSERT INTO Get_Data.CityBikeLanes values(14,2008, 2020,"Fieldcrest",4,4.9,"yes");
INSERT INTO Get_Data.CityBikeLanes values(15,2002, 2020,"York",4.5,4.5,"no");
INSERT INTO Get_Data.CityBikeLanes values(16,2012, 2021, "Race",4,4.7,"yes");
INSERT INTO Get_Data.CityBikeLanes values(17,2016, 2021,"Museum",4,3.8,"yes");
INSERT INTO Get_Data.CityBikeLanes values(18,2011, 2021, "Altin", 3.5, 2, "no");
INSERT INTO Get_Data.CityBikeLanes values(19,2008, 2021,"Fred",4,4.5,"yes");
INSERT INTO Get_Data.CityBikeLanes values(20,2002, 2021,"Morris",4.5,4.7,"no");
INSERT INTO Get_Data.CityBikeLanes values(21,2012, 2020, "Jameson",4,3.9,"yes");
INSERT INTO Get_Data.CityBikeLanes values(22,2016, 2020,"MLK",4,3.9,"yes");
INSERT INTO Get_Data.CityBikeLanes values(23,2011, 2020, "Parker", 3.6, 2, "no");
INSERT INTO Get_Data.CityBikeLanes values(24,2008, 2020,"Thomas",4,4.8,"yes");
INSERT INTO Get_Data.CityBikeLanes values(25,2002, 2020,"Running",4.5,4.3,"no");
INSERT INTO Get_Data.CityBikeLanes values(26,2012, 2021, "Waverly",4,4.5,"yes");
INSERT INTO Get_Data.CityBikeLanes values(27,2016, 2021,"Addison",4,3.9,"yes");
INSERT INTO Get_Data.CityBikeLanes values(28,2011, 2021, "Beaver", 3.5, 2.1, "no");
INSERT INTO Get_Data.CityBikeLanes values(29,2008, 2021,"Kensington",4,5,"yes");
INSERT INTO Get_Data.CityBikeLanes values(30,2002, 2021,"Mouse",4.5,4.5,"no");
INSERT INTO Get_Data.CityBikeLanes values(31,2012, 2020, "Chestnut",4,4.5,"yes");
INSERT INTO Get_Data.CityBikeLanes values(32,2016, 2020,"Walnut",4,3.7,"yes");
INSERT INTO Get_Data.CityBikeLanes values(33,2011, 2020, "Market", 3.8, 2, "no");
INSERT INTO Get_Data.CityBikeLanes values(34,2008, 2020,"Locust",4,4.8,"yes");
INSERT INTO Get_Data.CityBikeLanes values(35,2002, 2020,"South",4.5,4.7,"no");
INSERT INTO Get_Data.CityBikeLanes values(36,2012, 2021, "18th",4,4.7,"yes");
INSERT INTO Get_Data.CityBikeLanes values(37,2016, 2021,"2nd",4,3.2,"yes");
INSERT INTO Get_Data.CityBikeLanes values(38,2011, 2021, "Lombard", 3.5, 2.5, "no");
INSERT INTO Get_Data.CityBikeLanes values(39,2008, 2021,"Pine",4,5,"yes");
INSERT INTO Get_Data.CityBikeLanes values(40,2002, 2021,"Tasker",4.5,4.3,"no");
INSERT INTO Get_Data.CityBikeLanes values(41,2012, 2020, "Earp",4,4.5,"yes");
INSERT INTO Get_Data.CityBikeLanes values(42,2016, 2020,"Titan",4,3.9,"yes");
INSERT INTO Get_Data.CityBikeLanes values(43,2011, 2020, "Manning", 3.4, 2.7, "no");
INSERT INTO Get_Data.CityBikeLanes values(44,2008, 2020,"Fieldcrest",4,4.7,"yes");
INSERT INTO Get_Data.CityBikeLanes values(45,2002, 2020,"York",4.5,4.4,"no");
INSERT INTO Get_Data.CityBikeLanes values(46,2012, 2021, "Race",4,4.9,"yes");
INSERT INTO Get_Data.CityBikeLanes values(47,2016, 2021,"Museum",4,3.4,"yes");
INSERT INTO Get_Data.CityBikeLanes values(48,2011, 2021, "Altin", 3.7, 2, "no");
INSERT INTO Get_Data.CityBikeLanes values(49,2008, 2021,"Fred",4,4.7,"yes");
INSERT INTO Get_Data.CityBikeLanes values(50,2002, 2021,"Morris",4.5,4.4,"no");
INSERT INTO Get_Data.CityBikeLanes values(51,2012, 2020, "Jameson",4,4,"yes");
INSERT INTO Get_Data.CityBikeLanes values(52,2016, 2020,"MLK",4,4,"yes");
INSERT INTO Get_Data.CityBikeLanes values(53,2011, 2020, "Parker", 3.6, 2.3, "no");
INSERT INTO Get_Data.CityBikeLanes values(54,2008, 2020,"Thomas",4,4.5,"yes");
INSERT INTO Get_Data.CityBikeLanes values(55,2002, 2020,"Running",4.5,4.5,"no");
INSERT INTO Get_Data.CityBikeLanes values(56,2012, 2021, "Waverly",4,4.7,"yes");
INSERT INTO Get_Data.CityBikeLanes values(57,2016, 2021,"Addison",4,3.6,"yes");
INSERT INTO Get_Data.CityBikeLanes values(58,2011, 2021, "Beaver", 3.5, 2.5, "no");
INSERT INTO Get_Data.CityBikeLanes values(59,2008, 2021,"Kensington",4,4.9,"yes");
INSERT INTO Get_Data.CityBikeLanes values(60,2002, 2021,"Mouse",4.5,4.3,"no");

-- Take a look at what columns and data types live in the new table.
Select * From CityBikeLanes Limit 10;

-- Create CTE to show average safty rating per each street.
With safety_average_cte AS (
Select street, AVG(safetyrating) as 'rating'
From citybikelanes
Group by street
)

--Use the above CTE created to label all streets with an average saftey rating of 4 or higher as a "safe lane."
Select
street,
rating,
'safe lane' As 'label'
From safety_average_cte
Where rating >= 4;

-- Use a Windows function to see the safety rating for each ride on a street 
-- and the average saftey rating for that street. 
SELECT street, safetyrating,
AVG(safetyrating) OVER (PARTITION BY street) as "Average_safety_rating"
FROM CityBikeLanes;

-- Based on the results above,add a column for a recommendation on what should be done to the bike lane based on
-- each streets average safety rating. List by recommendation descending. 
Select street, safetyrating,
AVG(safetyrating) OVER ( street) as "Average_safety_rating",
Case When AVG(safetyrating) OVER (Partition by street) >= 4 Then "Leave As-Is"
    When AVG(safetyrating) OVER (Partition by street) <2.5 Then "Remove"
    Else "Improvements Needed"
    End As "Recommendation"
From CityBikeLanes
Order by Recommendation desc;
